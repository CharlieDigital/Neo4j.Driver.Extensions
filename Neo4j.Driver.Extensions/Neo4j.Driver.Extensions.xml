<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neo4j.Driver.Extensions</name>
    </assembly>
    <members>
        <member name="M:Neo4j.Driver.Extensions.DictionaryExtensions.ToObject``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Attempts to convert a <see cref="T:System.Collections.Generic.IDictionary`2"/> to a type defined by <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="dictionary">The dictionary containing the properties to be converted</param>
            <returns>An object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Neo4j.Driver.Extensions.DictionaryExtensions.AsInternal(System.Object,System.Type)">
            <summary>
            An internal way to call the <see cref="M:Neo4j.Driver.ValueExtensions.As``1(System.Object,``0)"/> method.
            </summary>
            <param name="o">The object instance to attempt to coerce.</param>
            <param name="propertyType">The type to try to coerce the <paramref name="o"/> to.</param>
            <returns>An object boxing the <paramref name="o"/> converted to <paramref name="propertyType"/>.</returns>
        </member>
        <member name="T:Neo4j.Driver.Extensions.Neo4jPropertyAttribute">
            <summary>
                Allows the property in Neo4j to be mapped to a different name in a class.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Extensions.Neo4jPropertyAttribute.Name">
            <summary>
                Gets or sets the name this property will be read from or written to Neo4j as.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Extensions.Neo4jPropertyAttribute.Ignore">
            <summary>
                Gets or sets whether to ignore this property entirely.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.Extensions.NodeExtensions">
            <summary>
            A collection of extensions for the <see cref="T:Neo4j.Driver.INode"/> interface.
            These should allow a user to deserialize things in an easier way.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Extensions.NodeExtensions.GetValue``1(Neo4j.Driver.INode,System.String)">
            <summary>
                Gets a value from an <see cref="T:Neo4j.Driver.INode" /> instance.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> to attempt to get the property as.</typeparam>
            <param name="node">The <see cref="T:Neo4j.Driver.INode" /> instance to pull the property from.</param>
            <param name="propertyName">The name of the property to get.</param>
            <returns>The converted <typeparamref name="T" /> or <c>default</c></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="node"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="propertyName"/> is an empty string or whitespace.</exception>
            <exception cref="T:System.FormatException">
                If any of the properties on the <paramref name="node" /> can't be cast to their
                <typeparamref name="T" /> equivalents.
            </exception>
        </member>
        <member name="M:Neo4j.Driver.Extensions.NodeExtensions.GetValueStrict``1(Neo4j.Driver.INode,System.String)">
            <summary>
                Gets a value from an <see cref="T:Neo4j.Driver.INode" /> instance. Will throw a <see cref="T:System.Collections.Generic.KeyNotFoundException"/> if the <paramref name="propertyName"/> isn't on the <paramref name="node"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> to attempt to get the property as.</typeparam>
            <param name="node">The <see cref="T:Neo4j.Driver.INode" /> instance to pull the property from.</param>
            <param name="propertyName">The name of the property to get.</param>
            <returns>The converted <typeparamref name="T" /> or <c>default</c></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="node"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="propertyName"/> is an empty string or whitespace.</exception>
            <exception cref="T:System.FormatException">
                If any of the properties on the <paramref name="node" /> can't be cast to their
                <typeparamref name="T" /> equivalents.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if <paramref name="propertyName"/> is not in the <paramref name="node"/>.</exception>
        </member>
        <member name="M:Neo4j.Driver.Extensions.NodeExtensions.GetValue(Neo4j.Driver.INode,System.String,System.Type,System.Boolean)">
            <summary>
                Gets a value from an <see cref="T:Neo4j.Driver.INode" /> instance, by executing
                the <see cref="M:Neo4j.Driver.Extensions.NodeExtensions.GetValue``1(Neo4j.Driver.INode,System.String)" /> method via reflection.
            </summary>
            <remarks>This exists primarily to allow the <see cref="M:Neo4j.Driver.ValueExtensions.As``1(System.Object)" /> method to be used to cast.</remarks>
            <param name="node">The <see cref="T:Neo4j.Driver.INode" /> instance to pull the property from.</param>
            <param name="propertyName">The name of the property to get.</param>
            <param name="propertyType">The <see cref="T:System.Type" /> to convert the property to.</param>
            <param name="strict">If <c>true</c> this will throw <see cref="T:System.Collections.Generic.KeyNotFoundException"/> if properties aren't found on the <see cref="!:node"/>.</param>
            <returns>The converted value, as an <see cref="T:System.Object" />.</returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="node" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="propertyName" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="propertyType" /> is null.</exception>
            <exception cref="T:System.InvalidCastException">
                If any of the properties on the <paramref name="node" /> can't be cast to their
                <typeparamref name="T" /> equivalents.
            </exception>
        </member>
        <member name="M:Neo4j.Driver.Extensions.NodeExtensions.ToObject``1(Neo4j.Driver.INode)">
            <summary>
                Attempts to cast the given <see cref="T:Neo4j.Driver.INode" /> instance into a complex type.
            </summary>
            <typeparam name="T">The type to try to cast to.</typeparam>
            <param name="node">The <see cref="T:Neo4j.Driver.INode" /> instance to cast from.</param>
            <returns>An instance of <typeparamref name="T" /> with it's properties set.</returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="node" /> is null.</exception>
            <exception cref="T:System.InvalidCastException">
                If any of the properties on the <paramref name="node" /> can't be cast to their
                <typeparamref name="T" /> equivalents.
            </exception>
        </member>
        <member name="M:Neo4j.Driver.Extensions.NodeExtensions.GetNeo4jPropertyAttribute(System.Reflection.PropertyInfo)">
            <summary>
                Gets a <see cref="T:Neo4j.Driver.Extensions.Neo4jPropertyAttribute" /> instance from a property.
            </summary>
            <remarks>This is to make it easier in <see cref="M:Neo4j.Driver.Extensions.NodeExtensions.ToObject``1(Neo4j.Driver.INode)" /> to get the right properties.</remarks>
            <param name="property">
                The <see cref="T:System.Reflection.PropertyInfo" /> representing the property that the
                <see cref="T:Neo4j.Driver.Extensions.Neo4jPropertyAttribute" /> is applied to.
            </param>
            <returns>A filled <see cref="T:Neo4j.Driver.Extensions.Neo4jPropertyAttribute" /> instance, or default values otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="property" /> is null.</exception>
        </member>
        <member name="M:Neo4j.Driver.Extensions.RecordExtensions.ToObject``1(Neo4j.Driver.IRecord,System.String)">
            <summary>
                Attempts to cast an <see cref="T:Neo4j.Driver.IRecord"/> instance into a <typeparamref name="T"/>.
            </summary>
            <remarks>This should be used for queries where you have returned the properties directly.</remarks>
            <example>
            <code>
                MATCH (m:Movie) RETURN m.title AS title, m.released AS released
            </code>
            </example>
            <typeparam name="T">The <see cref="T:System.Type"/> to cast to.</typeparam>
            <param name="record">The <see cref="T:Neo4j.Driver.IRecord"/> to cast from.</param>
            <param name="identifier">If supplied, this will try to pull an object from the identifier given.</param>
            <returns>An object of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="record" /> is null.</exception>
        </member>
        <member name="M:Neo4j.Driver.Extensions.RecordExtensions.GetValue``1(Neo4j.Driver.IRecord,System.String)">
            <summary>
                Gets a value from an <see cref="T:Neo4j.Driver.IRecord" /> instance.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> to attempt to get the property as.</typeparam>
            <param name="record">The <see cref="T:Neo4j.Driver.IRecord" /> instance to pull the property from.</param>
            <param name="identifier">The name of the identifier to get.</param>
            <returns>The converted <typeparamref name="T" /> or <c>default</c></returns>
            <exception cref="T:System.InvalidCastException">
                If any of the properties on the <paramref name="record" /> can't be cast to their
                <typeparamref name="T" /> equivalents.
            </exception>
        </member>
        <member name="M:Neo4j.Driver.Extensions.RecordExtensions.GetValue(Neo4j.Driver.IRecord,System.String,System.Type)">
            <summary>
                Gets a value from an <see cref="T:Neo4j.Driver.IRecord"/> instance, by executing
                the <see cref="M:Neo4j.Driver.Extensions.RecordExtensions.GetValue``1(Neo4j.Driver.IRecord,System.String)" /> method via reflection.
            </summary>
            <remarks>This exists primarily to allow the <see cref="M:Neo4j.Driver.ValueExtensions.As``1(System.Object)" /> method to be used to cast.</remarks>
            <param name="record">The <see cref="T:Neo4j.Driver.IRecord" /> instance to pull the property from.</param>
            <param name="propertyName">The name of the property to get.</param>
            <param name="propertyType">The <see cref="T:System.Type" /> to convert the property to.</param>
            <returns>The converted value, as an <see cref="T:System.Object" />.</returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="record" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="propertyName" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="propertyType" /> is null.</exception>
            <exception cref="T:System.InvalidCastException">
                If any of the properties on the <paramref name="record" /> can't be cast to their
                <typeparamref name="T" /> equivalents.
            </exception>
        </member>
        <member name="M:Neo4j.Driver.Extensions.ResultCursorExtensions.GetContent``1(Neo4j.Driver.IResultCursor,System.String)">
            <summary>
                Simplifies the <c>while</c>, <see cref="M:Neo4j.Driver.IResultCursor.FetchAsync" /> pairing, allowing a called to just use a
                <see cref="!:foreach" />.
            </summary>
            <remarks>
                You will want <typeparamref name="T" /> to be one of the ones that the <see cref="T:Neo4j.Driver.IDriver" /> can handle, i.e.
                <see cref="T:Neo4j.Driver.INode" /> etc.<br />
                NB. If you want to pull more than just one property from the <paramref name="cursor" />, don't use this method, use
                <see cref="M:Neo4j.Driver.Extensions.ResultCursorExtensions.GetRecords(Neo4j.Driver.IResultCursor)" /> instead.
            </remarks>
            <typeparam name="T">The <see cref="T:System.Type" /> to try to get the <paramref name="identifier" /> as.</typeparam>
            <param name="cursor">The <see cref="T:Neo4j.Driver.IResultCursor" /> instance to read from.</param>
            <param name="identifier">The identifier to pull out from.</param>
            <returns><c>yield</c>s the <typeparamref name="T" /> retrieved from the <paramref name="cursor" />.</returns>
        </member>
        <member name="M:Neo4j.Driver.Extensions.ResultCursorExtensions.GetRecords(Neo4j.Driver.IResultCursor)">
            <summary>
                Simplifies the <c>while</c>, <see cref="M:Neo4j.Driver.IResultCursor.FetchAsync" /> pairing, allowing a called to just use a
                <see cref="!:foreach" />.
            </summary>
            <param name="cursor">The <see cref="T:Neo4j.Driver.IResultCursor" /> instance to read from.</param>
            <returns><c>yield</c>s the <see cref="T:Neo4j.Driver.IRecord" /> retrieved from the <paramref name="cursor" />.</returns>
        </member>
    </members>
</doc>
